<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- properties 0个或1个  这个元素用来指定外部的属性元素-->
    <!--元素用于指定一个需要在配置中解析使用的外部属性文件，引入属性文件后，可以在配置中使用 ${property}这种形式的引用，通过这种方式引用属性文件中的属性值。 对于后面需要配置的**jdbc信息**和targetProject属性会很有用-->
    <!--这个属性可以通过resource或者url来指定属性文件的位置，这两个属性只能使用其中一个来指定，同时出现会报错-->
    <!--resource：指定**classpath**下的属性文件，使用类似com/myproject/generatorConfig.properties这样的属性值-->
    <!--url：可以指定文件系统上的特定位置，例如file:///C:/myfolder/generatorConfig.properties-->
    <properties resource="" url=""/>

    <!--classPathEntry 0个或1个 通过这个属性指定驱动的路径-->
    <classPathEntry location=""/>

    <!-- 需要有一个<context>元素  -->
    <!--指定生成一组对象的环境-->
    <!--defaultModelType 定义了MBG如何生成**实体类**  conditional(默认) ,flat(每一张表只生成一个实体类) ,hierarchical-->
    <!--targetRuntime 指定生成的代码的运行时环境   MyBatis3(默认) ,MyBatis3Simple  ,Ibatis2Java2  ,Ibatis2Java5-->
    <!--introspectedColumnImpl 指定扩展org.mybatis.generator.api.IntrospectedColumn 的实现类-->
    <!--如果你希望不生成和Example查询有关的内容，那么可以按照如下进行配置:
        <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        使用MyBatis3Simple可以避免在后面的<table>中逐个进行配置（后面会提到）-->
    <context id="demo" defaultModelType="" targetRuntime="" introspectedColumnImpl="">
        <!--property 支持的属性 autoDelimitKeywords,beginningDelimiter ,endingDelimiter,javaFileEncoding,javaFormatter,xmlFormatte-->
        <!--autoDelimitKeywords 当表名或者字段名为SQL关键字的时候，可以设置该属性为true，MBG会自动给表名或字段名添加**分隔符**-->
        <property name="autoDelimitKeywords" value="true"/>
        <property name="beginningDelimiter" value="'"/>
        <property name="endingDelimiter" value="'"/>
        <!--javaFileEncoding 设置要使用的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--javaFormatter和xmlFormatter 如果你想使用模板来定制生成的java文件和xml文件的样式，你可以通过指定这两个属性的值来实现-->

        <!--plugin 该元素可以配置0个或者多个 用来定义一个插件 插件将按在配置中配置的顺序执行-->
        <plugin type=""/>

        <!--commentGenerator 该元素最多可以配置1个 -->
        <!--该元素有一个可选属性type,可以指定用户的实现类 ,该类需要实现org.mybatis.generator.api.CommentGenerator接口。
            而且必有一个默认的构造方法。这个属性接收默认的特殊值DEFAULT，会使用默认的实现类org.mybatis.generator.internal.DefaultCommentGenerator-->
        <!--默认的实现类中提供了两个可选属性，需要通过<property>属性进行配置
            suppressAllComments:**阻止**生成注释，默认为false
            suppressDate:**阻止**生成的注释包含时间戳，默认为false
        -->
        <commentGenerator type="DEFAULT"/>

        <!--jdbcConnection 用于指定数据库连接信息，该元素必选，并且只能有一个-->
        <!--该元素还可以接受多个<property>子元素，这里配置的<property>属性都会添加到JDBC驱动的属性中-->
        <jdbcConnection driverClass="" connectionURL=""/>

        <!--javaTypeResolver 这个元素的配置用来指定JDBC类型和Java类型如何转换 该元素最多可以配置一个-->
        <!--该元素提供了一个可选的属性type，和<commentGenerator>比较类型，提供了默认的实现DEFAULT，一般情况下使用默认即可，需要特殊处理的情况可以通过其他元素配置来解决，不建议修改该属性-->
        <!--该属性还有一个可以配置的<property>元素  可以配置的属性为forceBigDecimals  该属性可以控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal,默认值为false，一般不需要配置-->
        <!--
            默认情况下的转换规则为：
                如果精度>0或者长度>18，就会使用java.math.BigDecimal
                如果精度=0并且10<=长度<=18，就会使用java.lang.Long
                如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
                如果精度=0并且长度<5，就会使用java.lang.Short
                如果设置为true，那么一定会使用java.math.BigDecimal
         -->
        <javaTypeResolver type="DEFAULT"/>

        <!-- javaModelGenerator 该元素必须配置一个，并且最多一个-->
        <!-- targetPackage:生成实体类存放的包名，一般就是放在该包下。实际还会受到其他配置的影响(<table>中会提到)-->
        <!-- targetProject:指定目标项目路径，可以是绝对路径或相对路径（如 targetProject="src/main/java"）-->
        <!--
                该元素支持以下几个<property>子元素属性：
                    constructorBased:该属性只对MyBatis3有效，如果true就会使用构造方法入参，如果false就会使用setter方式。默认为false
                    enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false
                    immutable:该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，都会使用构造方法入参，并且不会生成setter方法。如果为false，实体类属性就可以改变。默认为false
                    rootClass:设置所有实体类的基类。如果设置，需要使用类的全限定名称。并且如果MBG能够加载rootClass，那么MBG不会覆盖和父类中完全匹配的属性。匹配规则：
                        属性名完全相同
                        属性类型相同
                        属性有getter方法
                        属性有setter方法
                    trimStrings:是否对数据库查询结果进行trim操作
        -->
        <javaModelGenerator targetPackage="" targetProject=""/>

        <!--sqlMapGenerator  该元素可选，最多配置一个
                如果targetRuntime目标是**MyBatis3**，只有当<javaClientGenerator>需要XML时，该元素必须配置一个。 如果没有配置<javaClientGenerator>，则使用以下的规则：
        如果指定了一个<sqlMapGenerator>，那么MBG将只生成XML的SQL映射文件和实体类。
        如果没有指定<sqlMapGenerator>，那么MBG将只生成实体类
        -->
        <!--
            该元素支持<property>子元素，只有一个可以配置的属性
                enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false
        -->
        <sqlMapGenerator targetPackage="" targetProject=""/>

        <!--
            该元素可选，最多配置一个 如果不配置该元素，就不会生成Mapper接口
                type:该属性用于选择一个预定义的客户端代码（可以理解为Mapper接口）生成器，用户可以自定义实现，需要继承org.mybatis.generator.codegen.AbstractJavaClientGenerator类，必选有一个默认的构造方法。 该属性提供了以下预定的代码生成器，首先根据<context>的targetRuntime分成三类：
                    MyBatis3:
                        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
                        MIXEDMAPPER:XML和注解的混合形式，(上面这种情况中的)SqlProvider注解方法会被XML替代。
                        XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
                    MyBatis3Simple:
                        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
                        XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
                    Ibatis2Java2或**Ibatis2Java5**
                implementationPackage:如果指定了该属性，实现类就会生成在这个包中
        -->
        <!--
            该元素支持<property>子元素设置的属性: enableSubPackages,exampleMethodVisibility,methodNameCalculator,rootInterface,useLegacyBuilder
        -->
        <javaClientGenerator type="" targetPackage="" targetProject="" implementationPackage=""/>

        <!-- 该元素至少要配置一个，可以配置多个。该元素用来配置要通过内省的表。只有配置的才会生成实体类和其他文件 -->
        <!-- tableName：指定要生成的表名，可以使用SQL通配符匹配多个表 '%' -->
        <table tableName=""/>
    </context>
</generatorConfiguration>