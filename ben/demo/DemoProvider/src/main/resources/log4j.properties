##- OFF
##- FATAL
##- WARN
##- INFO
##- DEBUG
##- TRACE
##- ALL
# LOG4J
log4j.rootCategory=ALL, CONSOLE, LOGFILE
# CONSOLE
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
# LOGFILE
log4j.appender.LOGFILE.Append=true
log4j.appender.LOGFILE.MaxFileSize=5MB
log4j.appender.LOGFILE=org.apache.log4j.RollingFileAppender
log4j.appender.LOGFILE.File=log/provide.log
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
# spring
log4j.logger.org.springframework=WARN
# mybatis
log4j.logger.com.winning.*.mapper=DEBUG
#############################################################
####   %m   输出代码中指定的消息
####   %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
####   %r   输出自应用启动到输出该log信息耗费的毫秒数
####   %c   输出所属的类目，通常就是所在类的全名
####   %t   输出产生该日志事件的线程名
####   %n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
####   %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日 22:10:28,921
####   %l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )
####   %M   输出方法的名字、%m是输出代码指定的日志信息。
####   %x   输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
####   %%   输出一个”%”字符
####   %F   输出日志消息产生时所在的文件名称
####   %M   输出执行方法
####   %L   输出代码中的行号